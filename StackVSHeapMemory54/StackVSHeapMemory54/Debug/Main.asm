; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	D:\dev\CppSeries\StackVSHeapMemory54\StackVSHeapMemory54\Main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__C8B35760_vcruntime_new@h DB 01H
__0D871CA9_stdlib@h DB 01H
__A64EDDFE_corecrt_math@h DB 01H
__DDE01A3D_cstdlib DB 01H
__DDF94069_xtgmath@h DB 01H
__39F3BA96_cmath DB 01H
__5CB118B2_corecrt_stdio_config@h DB 01H
__E1751F56_corecrt_wstdio@h DB 01H
__1A56FFCE_stdio@h DB 01H
__680B7259_corecrt_memcpy_s@h DB 01H
__C4BAF65F_corecrt_memory@h DB 01H
__75DBB09B_corecrt_wstring@h DB 01H
__8BF4880D_string@h DB 01H
__B4A58EF9_type_traits DB 01H
__99AA3B5F_malloc@h DB 01H
__5FD413AC_vcruntime_exception@h DB 01H
__9386590A_exception DB 01H
__A50A6961_corecrt_wconio@h DB 01H
__34817EB6_corecrt_wio@h DB 01H
__FC3D01A7_corecrt_wtime@h DB 01H
__975E9DB9_stat@h DB 01H
__E4701C33_wchar@h DB 01H
__6CD0239E_limits DB 01H
__A039F618_iosfwd DB 01H
__D7650CB2_xutility DB 01H
__7C0E9BB9_xatomic0@h DB 01H
__0636CDE3_xmemory0 DB 01H
__1AC86357_stdexcept DB 01H
__C5940B8A_vcruntime_typeinfo@h DB 01H
__C57EADF0_ctype@h DB 01H
__B8331C63_xlocinfo DB 01H
__D07E2F10_memory DB 01H
__FC3B781F_xfacet DB 01H
__2B950ED8_xlocale DB 01H
__2C8C3E49_xcall_once@h DB 01H
__93D12C69_system_error DB 01H
__81D66B70_xiosbase DB 01H
__B51268CF_xlocnum DB 01H
__CADF59F8_ios DB 01H
__A4ADA98C_string DB 01H
__B1EEA38D_main@cpp DB 01H
__F4AB7AE9_xstring DB 01H
__5B55E126_istream DB 01H
__3885D41C_ostream DB 01H
__1868DBEB_streambuf DB 01H
__EAED9FB6_utility DB 01H
__1DF208A4_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
__ehfuncinfo$_main DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\dev\cppseries\stackvsheapmemory54\stackvsheapmemory54\main.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv148 = -392						; size = 4
tv144 = -392						; size = 4
tv141 = -392						; size = 4
tv138 = -392						; size = 4
$T2 = -384						; size = 4
$T3 = -372						; size = 4
$T4 = -360						; size = 4
$T5 = -348						; size = 4
$T6 = -336						; size = 4
$T7 = -324						; size = 4
$T8 = -312						; size = 4
_hVector$ = -108					; size = 4
_harray$ = -96						; size = 4
_hvalue$ = -84						; size = 4
_sVector$ = -72						; size = 12
_sarray$ = -52						; size = 20
_value$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_main	PROC						; COMDAT

; 11   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_main
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __B1EEA38D_main@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 12   : 	// stack allocation: 堆栈指针向后移动n个字节，存值，放入safety guard，因为该指针是根据字节索引的，所以访问非常快
; 13   : 	int value = 5;

	mov	DWORD PTR _value$[ebp], 5

; 14   : 	int sarray[5];
; 15   : 	sarray[0] = 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _sarray$[ebp+ecx], 1

; 16   : 	sarray[1] = 2;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _sarray$[ebp+eax], 2

; 17   : 	sarray[2] = 3;

	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _sarray$[ebp+eax], 3

; 18   : 	sarray[3] = 4;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _sarray$[ebp+ecx], 4

; 19   : 	sarray[4] = 5;

	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR _sarray$[ebp+eax], 5

; 20   : 	Vector3 sVector;

	lea	ecx, DWORD PTR _sVector$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 21   : 
; 22   : 	// heap allocation
; 23   : 	int* hvalue = new int;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR _hvalue$[ebp], eax

; 24   : 	*hvalue = 5;

	mov	eax, DWORD PTR _hvalue$[ebp]
	mov	DWORD PTR [eax], 5

; 25   : 	int* harray = new int[5];

	push	20					; 00000014H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR _harray$[ebp], eax

; 26   : 	harray[0] = 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR [edx+ecx], 1

; 27   : 	harray[1] = 2;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR [ecx+eax], 2

; 28   : 	harray[2] = 3;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR [ecx+eax], 3

; 29   : 	harray[3] = 4;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR [edx+ecx], 4

; 30   : 	harray[4] = 5;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR [ecx+eax], 5

; 31   : 	Vector3* hVector = new Vector3();

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN3@main
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN4@main
$LN3@main:
	mov	DWORD PTR tv138[ebp], 0
$LN4@main:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _hVector$[ebp], ecx

; 32   : 
; 33   : 	delete hvalue;

	mov	eax, DWORD PTR _hvalue$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	push	4
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	cmp	DWORD PTR $T4[ebp], 0
	jne	SHORT $LN5@main
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN6@main
$LN5@main:
	mov	DWORD PTR _hvalue$[ebp], 33059		; 00008123H
	mov	edx, DWORD PTR _hvalue$[ebp]
	mov	DWORD PTR tv141[ebp], edx
$LN6@main:

; 34   : 	delete[] harray;

	mov	eax, DWORD PTR _harray$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN7@main
	mov	DWORD PTR tv144[ebp], 0
	jmp	SHORT $LN8@main
$LN7@main:
	mov	DWORD PTR _harray$[ebp], 33059		; 00008123H
	mov	edx, DWORD PTR _harray$[ebp]
	mov	DWORD PTR tv144[ebp], edx
$LN8@main:

; 35   : 	delete hVector;

	mov	eax, DWORD PTR _hVector$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	cmp	DWORD PTR $T2[ebp], 0
	jne	SHORT $LN9@main
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN10@main
$LN9@main:
	mov	DWORD PTR _hVector$[ebp], 33059		; 00008123H
	mov	edx, DWORD PTR _hVector$[ebp]
	mov	DWORD PTR tv148[ebp], edx
$LN10@main:

; 36   : 
; 37   : 	std::cin.get();

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@main:
	DD	2
	DD	$LN15@main
$LN15@main:
	DD	-52					; ffffffccH
	DD	20					; 00000014H
	DD	$LN12@main
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN13@main
$LN13@main:
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN12@main:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
	push	12					; 0000000cH
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$_main:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_main
	jmp	___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\dev\cppseries\stackvsheapmemory54\stackvsheapmemory54\main.cpp
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 7    : 	Vector3() : x(10), y(11), z(12) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B1EEA38D_main@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41300000
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\dev\cppseries\stackvsheapmemory54\stackvsheapmemory54\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B1EEA38D_main@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\dev\cppseries\stackvsheapmemory54\stackvsheapmemory54\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B1EEA38D_main@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
